#!/bin/bash

#
# This script should be run by the environ premake launcher script
#  That script should set these environment variables :
#
# REPO_ROOT
#   Root of the code base. Usually found by scanning upwards from the current dir to find some token root file or subdir.
#
# OS_VERSION
#   Unique identifying string for operating system. Allows you to build Premake on an nfs drive in a heterogenous environment
#
# PREMAKE_LOCAL_DRIVE
#   Set this to a path to a folder on the local hard drive. Premake will build to $PREMAKE_LOCAL_DRIVE/$USER/premakeBuild/<path/from/$HOME/to/src>

# Additional environment variables :
# PREMAKE_SIMULTANEOUS_BUILDS=on | off			off by default
# PREMAKE_DEBUG = 1
#   Always build with thedebug version of premake
# PREMAKE_PRERUN
#   Command to run prior to building / running premake

if [[ "$OS_VERSION" == "" ]]; then
	export OS_VERSION=$(uname -r | tr -d ' ')
fi

if [[ "$PREMAKE_SIMULTANEOUS_BUILDS" == "" ]]; then
	export PREMAKE_SIMULTANEOUS_BUILDS="off"
fi

if [[ "$IS_RUNNING_PREMAKE" != "" ]]; then
	# Already running, don't recurse
	exit 0
fi

PREMAKE_DIR=$(readlink -f $(dirname $0) )
debug=0
rebuild=0
rebuildDebug=0
toolset=""
args=()
useLock=1
objdir=""
reporoot=""

for i in $(seq 1 $#); do
	arg=$1
	shift 1
	if [[ "$arg" == "-d" ]]; then debug=1;
	elif [[ "${arg:0:9}" == "--toolset" ]]; then toolset=$arg;
	elif [[ "$arg" == "--nolock" ]]; then 
		useLock=0
	elif [[ "$arg" == "--nolockwait" ]]; then 
		useLock=2
	elif [[ "${arg:0:9}" == "--objdir=" ]]; then 
		objdir="${arg:9}"
		args+=("$arg")
	elif [[ "${arg:0:11}" == "--reporoot=" ]]; then
		reporoot="${arg:11}"
		args+=("$arg")
	else 
		args+=("$arg")
	fi
done
args+=($toolset)

if [[ "$REPO_ROOT" == "" ]]; then
	if [[ "$reporoot" == "" ]]; then
		echo "No --reporoot and REPO_ROOT env not set"
		exit 1
	else
		export REPO_ROOT="$reporoot"
	fi
fi

if [[ "$PREMAKE_DEBUG" == "1" ]]; then
	debug=1
fi

# DEBUG
if [[ "$PREMAKE_PRERUN" != "" ]]; then
	$PREMAKE_PRERUN
	rv=$?
	if [[ $rv != 0 ]]; then
		exit $rv
	fi
fi

# Test if the hash of src folder has changed to see if we need to rebuild
hash=$($PREMAKE_DIR/etc/getfilehash -c $PREMAKE_DIR/src $PREMAKE_DIR/scripts)
hashFile=$PREMAKE_DIR/hash.tmp

touch $hashFile
if [[ ! -f "$PREMAKE_DIR/bin/$OS_VERSION/Release/premake4" ]]; then
	rebuild=1
fi
if [[ ! -f "$PREMAKE_DIR/bin/$OS_VERSION/Debug/premake4" ]]; then
	rebuildDebug=1
fi
if [[ $(cat $hashFile) != $hash ]]; then
	rebuild=1
fi

# Build premake if necessary
if [[ (($debug == 0) && ($rebuild == 1)) || ($rebuildDebug == 1) ]]; then
	$PREMAKE_DIR/buildPremake.sh -v 
	result=$?
	if [[ $result != 0 ]]; then
		if [[ $result == 2 ]]; then
			# user-terminated
			exit $result
		fi
		
		echo "Cleaning Premake & Rebuilding..."
		$PREMAKE_DIR/buildPremake.sh -v -f 
		result=$?
		if [[ $result != 0 ]]; then
			exit $result
		fi
	fi
	hash=$($PREMAKE_DIR/etc/getfilehash -c $PREMAKE_DIR/src $PREMAKE_DIR/scripts)
	echo $hash > $hashFile

	echo "Running Premake..."
fi

if [[ "$objdir" == "" ]]; then
	if [[ "$PREMAKE_LOCAL_DRIVE" != "" ]]; then
		export TMP_DIR="$PREMAKE_LOCAL_DRIVE/$USER/premakeBuild"
		export PATH_FROM_REPO_ROOT=$(readlink -f $REPO_ROOT)
		export PATH_FROM_REPO_ROOT=${PATH_FROM_REPO_ROOT/$HOME/}
		mkdir -p $TMP_DIR/$PATH_FROM_REPO_ROOT 2>/dev/null
		export LOCK_FILE="$TMP_DIR/$PATH_FROM_REPO_ROOT/.premake_lock"
	else
		export LOCK_FILE="$REPO_ROOT/.premake_lock"
	fi
else
	lockDir=$(cd $REPO_ROOT && readlink -f $objdir)
	if [[ -d $lockDir ]]; then
		export LOCK_FILE="$lockDir/.premake_lock"
	else
		export LOCK_FILE="$REPO_ROOT/.premake_lock"
	fi
fi	
touch $LOCK_FILE
export LOCK_CMD=""
export PREMAKE_START_MESSAGE=""

# Preliminary test for lock to notify user they have to wait
if [[ "$useLock" == "1" ]]; then
	export LOCK_CMD="flock -o $LOCK_FILE"
	flock -o -w 0 $LOCK_FILE -c ""
	if [[ $? != 0 ]]; then
		if [[ ("$objdir" == "") && ("$PREMAKE_SIMULTANEOUS_BUILDS" != "off") ]]; then
			# Support 2 simultaneous builds
			echo "Enabling simultaneous build : Building to nbin2.$OS_VERSION"
			args+=("--objdir=nbin2.$OS_VERSION")
			export LOCK_FILE="$TMP_DIR/$PATH_FROM_REPO_ROOT/.premake_lock2"
			touch $LOCK_FILE
			export LOCK_CMD="flock -o $LOCK_FILE"
		fi
		flock -o -w 0 $LOCK_FILE -c ""
	fi
	if [[ $? != 0 ]]; then
		echo "Waiting for another Premake to finish (lockfile : $LOCK_FILE)"
		export PREMAKE_START_MESSAGE="Premake lock acquired"
	fi
elif [[ "$useLock" == "2" ]]; then
	export LOCK_CMD="flock -n -o $LOCK_FILE"
fi

# Run Premake
if [[ $debug == 1 ]]; then
	export LUA_PATH="$PREMAKE_DIR/lib/?.lua;$PREMAKE_DIR/lib/socket/?.lua"
	export LUA_CPATH="$PREMAKE_DIR/bin/$OS_VERSION/Debug/?.so"

	$LOCK_CMD $PREMAKE_DIR/bin/$OS_VERSION/Debug/premake4 --debug --attachNoWait --systemScript=$PREMAKE_DIR/premake-system.lua --scripts=$PREMAKE_DIR/src "${args[@]}"
	result=$?
else
	$LOCK_CMD $PREMAKE_DIR/bin/$OS_VERSION/Release/premake4 --systemScript=$PREMAKE_DIR/premake-system.lua "${args[@]}"
	result=$?
	
	if [[ "$useLock" == "2" ]]; then
		echo "Another Premake is running, failed to acquire lock $LOCK_FILE"
	fi
fi

exit $result
